// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1518.CommandBasedTest.subsystems;

import org.usfirst.frc1518.CommandBasedTest.OI;
import org.usfirst.frc1518.CommandBasedTest.Robot;
import org.usfirst.frc1518.CommandBasedTest.RobotMap;
import org.usfirst.frc1518.CommandBasedTest.commands.*;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {


	double circumferenceInInches = Math.PI * 8;
	int pulsesPerRotation = 4096;
	public static RobotDrive drive;
	double currentAngle = 0;
	double currentPosition = 0;
	double targetPulseCount = 0;
	double drivePower = 0;
	double startPosition = 0;
	
	public DriveTrain(){
		super();
		if(Robot.isTestBot == false){
		drive = new RobotDrive(RobotMap.driveTrainFrontLeftWheel, RobotMap.driveTrainRearLeftWheel, RobotMap.driveTrainFrontRightWheel, RobotMap.driveTrainRearRightWheel);
		}
		else if(Robot.isTestBot == true){
			drive = new RobotDrive(RobotMap.pwmDriveFL, RobotMap.pwmDriveRL, RobotMap.pwmDriveFR, RobotMap.pwmDriveRR);
		}
	}
	
	public void drive(GenericHID mainstick){
		/*double zAxis = Robot.oi.mainstick.getZ();
		double yAxis = Robot.oi.mainstick.getY();
		double xAxis = Robot.oi.mainstick.getX() * 0.5;
    	//yAxis = (yAxis * yAxis);
    	zAxis = (zAxis * Math.abs(zAxis)) + xAxis;

		drive.arcadeDrive(yAxis,zAxis);*/
	}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {


        setDefaultCommand(new Drive());

        

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void takeJoystickInputs(Double yAxis, Double zAxis) {
		//double xAxis = (zAxis + Robot.oi.mainstick.getX()) * 0.75;
		//yAxis = (yAxis * Math.abs(yAxis));
    	// multiplying the zAxis by itself causes a slower power curve on the steering
    	// adding 50% of the xAxis to enable better steering while moving forward
    	//zAxis = (zAxis * Math.abs(zAxis) * 0.75);
    	//xAxis = (xAxis * Math.abs(xAxis) * 0.75);
    	
    	drive.arcadeDrive(yAxis * 0.75, zAxis * 0.75);
    	
    }
    public void stop() {
    	drive.arcadeDrive(0,0);
    }
    
    public boolean hasDrivenFarEnough(double startPos, double distance) {
		double currentPosition = RobotMap.driveTrainFrontRightWheel.getEncPosition();
		double targetPulseCount = distance / circumferenceInInches * pulsesPerRotation;
		double targetPosition = startPos + targetPulseCount;
		//System.out.println("Current Position: " + String.valueOf(currentPosition));
		//System.out.println("Target Position: " + String.valueOf(targetPulseCount));
		if (currentPosition >= targetPosition) {
			
			return true;
		}
		else{
			return false;
		}
	}
    public boolean drivenFarEnough(double distance) {
		currentPosition = RobotMap.driveTrainFrontRightWheel.getEncPosition();
		targetPulseCount = distance / circumferenceInInches * pulsesPerRotation;
		//System.out.println("Current Position: " + String.valueOf(currentPosition));
		//System.out.println("Target Position: " + String.valueOf(targetPulseCount));
		if (currentPosition >= targetPulseCount) {
			return true;
		}
		return false;
	}
	public boolean gyroTurn(double targetAngle) {
		RobotMap.rioGyro.reset();
			while ((readGyro() != targetAngle) && (calcP(targetAngle) > 0.2)) {
				drive.arcadeDrive(0, calcP(targetAngle));
			}
		return true;
	}
	public boolean gyroDrive(double distance) {
		// RobotMap.rioGyro.reset();
		startPosition = RobotMap.driveTrainFrontRightWheel.getEncPosition();
		while (hasDrivenFarEnough(startPosition, distance) == false) {
			double drift = readGyro();
			drive.arcadeDrive(0.5, -drift);
			System.out.println("Gyro Heading: " + drift);
		}
		stop();
		return true;
	}
	protected double readGyro() {
		double angle = RobotMap.rioGyro.getAngle();
		return angle;
	}
	protected double calcP(double tAngle) {
		double p = 0.4; //8 * ((1-(readGyro() / Math.abs(tAngle))) - 0.05);
		if (tAngle > 0) {
			return p;
		}
		else {
			return -p;
		}
	}
}

