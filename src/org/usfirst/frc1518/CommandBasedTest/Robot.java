// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1518.CommandBasedTest;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import org.usfirst.frc1518.CommandBasedTest.commands.*;
import org.usfirst.frc1518.CommandBasedTest.subsystems.*;

import edu.wpi.first.wpilibj.smartdashboard.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autoMode;

    public static OI oi;
    public static MecanumDrive driveTrain;
    public static Servos servos;
    public static Pneumatics pneumatics;
    public static Launcher launcher;
	public static double feedSpeed;
	public static boolean isReversed = true;
	public static boolean isTestBot = false;
	public static boolean isTankMode = false;
	public static boolean intakeOn;
	public static String alliance = "";
	public static UsbCamera cam0;
	public static UsbCamera cam1;
	@SuppressWarnings("rawtypes")
	SendableChooser autoModeSelect;

	public static double xDrive;
	
	//Joystick Deadspace Controls
	public static double mainstickX;
	public static double mainstickY;
	public static double mainstickZ;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public void robotInit() {
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new MecanumDrive(RobotMap.driveTrainFrontLeftWheel, RobotMap.driveTrainRearLeftWheel, RobotMap.driveTrainFrontRightWheel, RobotMap.driveTrainRearRightWheel);
        servos = new Servos();
        RobotMap.dio8.set(true);
        RobotMap.dio9.set(true);
        //PUT THIS ALL BACK ON THE REAL ROBOT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        cam0 = CameraServer.getInstance().startAutomaticCapture();
        cam0.setResolution(320, 240);
        cam0.setFPS(15);
        cam1 = CameraServer.getInstance().startAutomaticCapture();
        cam1.setResolution(320, 240);
        cam1.setFPS(7);
        //cam2 = CameraServer.getInstance().startAutomaticCapture();  // On the Rabbit
        //cam2.setResolution(640, 480);
        oi = new OI();
        alliance = DriverStation.getInstance().getAlliance().toString();
        SmartDashboard.putString("Alliance", alliance);
        RobotMap.rioGyro.calibrate();
        // instantiate the command used for the autonomous period
        autoModeSelect = new SendableChooser();
        autoModeSelect.addObject("Left Drop Off Gear", new Auto1());
        autoModeSelect.addObject("Right Drop Off Gear", new Auto2());
        autoModeSelect.addObject("Middle Station", new Auto3());
        autoModeSelect.addDefault("Do Nothing", new Auto4());
        autoModeSelect.addObject("Drive Forward", new Auto5());
        autoModeSelect.addObject("Middle and Shoot", new Auto6());
        SmartDashboard.putData("Autonomous Mode Selection", autoModeSelect);
    	RobotMap.driveTrainFrontLeftWheel.setInverted(true);
    	RobotMap.driveTrainFrontRightWheel.setInverted(true);
    	RobotMap.driveTrainRearLeftWheel.setInverted(true);
    	RobotMap.driveTrainRearRightWheel.setInverted(true);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit and first time thru Init().
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	RobotMap.dio8.set(true);
    	RobotMap.dio9.set(true);

    	RobotMap.driveTrainFrontLeftWheel.setInverted(true);
    	RobotMap.driveTrainFrontRightWheel.setInverted(true);
    	RobotMap.driveTrainRearLeftWheel.setInverted(true);
    	RobotMap.driveTrainRearRightWheel.setInverted(true);
    	isReversed = true;
    	//RobotMap.pwmIntake.set(0);
    	intakeOn = false;

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();

    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        setLights();
        autoMode = (Command) autoModeSelect.getSelected();
        if (autoMode != null) autoMode.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
 //       double currentPosR = RobotMap.driveTrainFrontRightWheel.getEncPosition();
 //       double currentPosL = RobotMap.driveTrainRearLeftWheel.getEncPosition();
 //       SmartDashboard.putNumber("Current Position Right: ", currentPosR);
 //       SmartDashboard.putNumber("Current Position Left: ", currentPosL);
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autoMode != null) autoMode.cancel();
    	Servos.servo1.set(Servos.highPosition);
        Servos.servo2.set(1 - Servos.highPosition);
        setLights();
 //       RobotMap.driveTrainFrontRightWheel.setEncPosition(0);
 //       RobotMap.driveTrainFrontLeftWheel.setEncPosition(0);
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //turbo = true;
        if (Robot.oi.turbo.get()) {
        	xDrive = 0.85;
        }
        
        else {
        	xDrive = 0.65;
        }
        
    	//COMPUTE JOYSTICK VALUES GIVING DEADSPACE
    	if (Math.abs(oi.mainstick.getX()) >= 0.30) {	
    		mainstickX = oi.mainstick.getX(); 
    	}
    	
    	else { 
    		mainstickX = 0; 
    	}
    	
    	if (Math.abs(oi.mainstick.getY()) >= 0.30) {	
    		mainstickY = oi.mainstick.getY(); 
    	}
    	
    	else { 
    		mainstickY = 0; 
    	}
    	
    	if (Math.abs(oi.mainstick.getZ()) >= 0.25) {	
    		mainstickZ = oi.mainstick.getZ(); 
    	}
    	
    	else { 
    		mainstickZ = 0; 
    	}
    	
    	driveTrain.driveCartesian((Math.pow(mainstickX, 3) * xDrive), (Math.pow(mainstickY, 3) * -xDrive), (Math.pow(mainstickZ, 3) * .6), 0.0);
    	//RobotMap.dio8.pulse(1);
    	//RobotMap.dio9.pulse(0);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        //LiveWindow.run();
    }
    
    public void setLights() {
        alliance = DriverStation.getInstance().getAlliance().toString();
    	if (alliance == "Red") {
    		RobotMap.dio8.set(true);
    		RobotMap.dio9.set(false);
       	}
    	else if (alliance == "Blue"){
    		RobotMap.dio8.set(false);
    		RobotMap.dio9.set(true);
    	}
    	else {
    		RobotMap.dio8.set(false);
    		RobotMap.dio9.set(false);
       	}
    }
}
